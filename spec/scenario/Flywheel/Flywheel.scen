-- NewComptroller, but with markets listed so that we can make them venus markets in constructor
Macro FlywheelComptroller price=1.0 borrowRate=0.000005 venusInitAmount=5000000e18
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    --g1
    ComptrollerImpl Deploy ScenarioG1 ComptrollerScenG1
    Unitroller SetPendingImpl ComptrollerScenG1
    ComptrollerImpl ComptrollerScenG1 BecomeG1
    --list some tokens
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetMaxAssets 20
    Comptroller SetCloseFactor 0.5
    Comptroller LiquidationIncentive 1.1
    Comptroller SetBaiRate 1e18
    NewBToken ZRX vZRX
    NewBToken BAT vBAT
    Support vZRX collateralFactor:0.5
    Support vBAT collateralFactor:0.5
    Comptroller AddBaiMarkets (vZRX vBAT)
    Bep20 Deploy Standard XBID "XBID Token" 18
    Give (Address Comptroller) venusInitAmount XBID
    Comptroller Send "setXBIDAddress(address)" (Address XBID)
    Bep20 Deploy Standard BAI "BAI Token" 18
    Give (Address Comptroller) venusInitAmount BAI
    Comptroller Send "setBAIAddress(address)" (Address BAI)

Macro InitSpeeds
    Prep Geoff 100e18 ZRX vZRX
    Mint Geoff 50e18 vZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT vBAT
    Mint Coburn 6e18 vBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn vBAT
    Borrow Coburn 1e18 vZRX
    Comptroller RefreshBaiSpeeds

Test "Accrue XBID during a mint"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Mint Geoff 1e18 vZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Assert Equal (Comptroller BaiSupplyState vZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller BaiSupplyState vZRX "block") 300000
    Assert Equal (Bep20 XBID TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller BaiSupplierIndex vZRX Geoff) 1.2000000000001e49

Test "Accrue XBID during a borrow"
    FlywheelComptroller
    InitSpeeds
    Comptroller FastForward 300000 Blocks
    Assert Equal (Comptroller BaiAccrued Coburn) 0
    Borrow Coburn 0.1e18 vZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller BaiAccrued Coburn) 0
    Assert Equal (Comptroller BaiBorrowState vZRX "index") 3.00001e41
    Assert Equal (Comptroller BaiBorrowState vZRX "block") 300000
    Assert Equal (Bep20 XBID TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller BaiBorrowerIndex vZRX Coburn) 3.00001e41

Test "Accrue XBID during a redeem"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Redeem Geoff 1e9 vZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Assert Equal (Comptroller BaiSupplyState vZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller BaiSupplyState vZRX "block") 300000
    Assert Equal (Bep20 XBID TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller BaiSupplierIndex vZRX Geoff) 1.2000000000001e49

Test "Accrue XBID during a repayBorrow"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Prep Coburn 0.5e18 ZRX vZRX
    RepayBorrow Coburn 0.5e18 vZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 =  3.00001e41
    Assert Equal (Comptroller BaiAccrued Coburn) 0
    Assert Equal (Comptroller BaiBorrowState vZRX "index") 3.00001e41
    Assert Equal (Comptroller BaiBorrowState vZRX "block") 300000
    Assert Equal (Bep20 XBID TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller BaiBorrowerIndex vZRX Coburn) 3.00001e41

Test "Accrue XBID during a repayBorrowBehalf of 0"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    -- confirm we can init all flywheel accounts for free
    RepayBorrowBehalf Jared Coburn 0 vZRX
    -- new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 1e18 = 3.00001e41
    Assert Equal (Comptroller BaiAccrued Coburn) 0
    Assert Equal (Comptroller BaiBorrowState vZRX "index") 3.00001e41
    Assert Equal (Comptroller BaiBorrowState vZRX "block") 300000
    Assert Equal (Bep20 XBID TokenBalance Coburn) 300000e18
    Assert Equal (Comptroller BaiBorrowerIndex vZRX Coburn) 3.00001e41

Test "Accrue XBID during a liquidation"
    FlywheelComptroller
    InitSpeeds
    Assert Equal (Comptroller BaiSpeed vZRX) 1e18
    Assert Equal (Comptroller BaiSpeed vBAT) 0
    --coburn zrx borrow, bat supply. geoff zrx supply
    FastForward 600000 Blocks--1e18 borrow * (1 + 600000 * 0.000005) = 3.5e18 borrow > 6e18 collateral * 0.5 CF
    Prep Geoff Some ZRX vZRX
    From Geoff (BToken vZRX Liquidate Coburn vBAT 0.5e18)
    -- zrx borrow index is updated and xvs distributed
    -- * new index = initVal + deltaBlocks * borrowSpeed * 1e36 / totalBorrows
    -- * new index = 1e36 + 600000 * 1e18 * 1e36 / 1e18 = 6.00001E41
    Assert Equal (Comptroller BaiBorrowState vZRX "index") 6.00001e41
    Assert Equal (Comptroller BaiBorrowState vZRX "block") 600000
    -- zrx supply index isnt updated and xvs isnt distributed for zrx supply
    Assert Equal (Comptroller BaiSupplyState vZRX "index") 1e36
    Assert Equal (Comptroller BaiSupplyState vZRX "block") 0
    Assert Equal (Comptroller BaiSupplierIndex vZRX Geoff) 1e36--no change, minted in init
    -- bat supply/borrow index is not updated, since there is no xvs speed
    Assert Equal (Comptroller BaiSupplyState vBAT "index") 1e36
    Assert Equal (Comptroller BaiSupplyState vBAT "block") 600000
    -- neither is borrow state. block is 0 because update fn is never even called
    Assert Equal (Comptroller BaiBorrowState vBAT "index") 1e36
    Assert Equal (Comptroller BaiBorrowState vBAT "block") 0
    --
    Assert Equal (Comptroller BaiSupplierIndex vBAT Coburn) 1e36
    Assert Equal (Comptroller BaiBorrowerIndex vZRX Coburn) 6.00001e41
    Assert Equal (Bep20 XBID TokenBalance Coburn) 600000e18
    Assert Equal (Comptroller BaiAccrued Coburn) 0
    --
    Assert Equal (Comptroller BaiSupplierIndex vBAT Geoff) 1e36
    Assert Equal (Bep20 XBID TokenBalance Geoff) 0
    Assert Equal (Comptroller BaiAccrued Geoff) 0

Test "Accrue XBID during a transfer"
    FlywheelComptroller
    InitSpeeds
    FastForward 300000 Blocks
    Assert Equal (Bep20 XBID TokenBalance Geoff) 0
    Assert Equal (Comptroller BaiSupplierIndex vZRX Geoff) 1e36
    Transfer Geoff Jared 2.5e10 vZRX
    -- new index = initVal + deltaBlocks * supplySpeed * 1e36 / totalSupply
    -- new index = 1e36 + 300000 * 1e18 * 1e36 / 2.5e10 = 1.2000000000001e49
    Assert Equal (Bep20 XBID TokenBalance Geoff) 300000e18
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Assert Equal (Comptroller BaiSupplyState vZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller BaiSupplyState vZRX "block") 300000
    Assert Equal (Comptroller BaiSupplierIndex vZRX Geoff) 1.2000000000001e49
    --
    Assert Equal (Comptroller BaiAccrued Jared) 0
    Assert Equal (Comptroller BaiSupplyState vZRX "index") 1.2000000000001e49
    Assert Equal (Comptroller BaiSupplyState vZRX "block") 300000
    Assert Equal (Comptroller BaiSupplierIndex vZRX Jared) 1.2000000000001e49

Test "Accrues correctly when market is added, deactivated, and activated again"
    FlywheelComptroller
    InitSpeeds
    NewBToken DAI vDAI
    --
    Support vDAI collateralFactor:0.5
    Comptroller AddBaiMarkets vDAI
    Assert Equal (Comptroller GetBaiMarkets) [(Address vZRX) (Address vBAT) (Address vDAI)]
    Prep Jared Some DAI vDAI
    Mint Jared 6e18 vDAI
    EnterMarkets Geoff vZRX
    Borrow Geoff 0.5e18 vDAI
    Borrow Coburn 0.5e18 vDAI
    Comptroller RefreshBaiSpeeds
    Assert Equal (Comptroller BaiSpeed vZRX) 0.5e18
    Assert Equal (Comptroller BaiSpeed vDAI) 0.5e18
    --
    FastForward 100 Blocks
    Comptroller DropBaiMarket vDAI
    Comptroller ClaimBai Geoff
    Assert Equal (Bep20 XBID TokenBalance Geoff) 75e18--half of vdai, all of zrx(.25e18 + .5e18) * 100
    Assert Equal (Comptroller GetBaiMarkets) [(Address vZRX) (Address vBAT)]
    Assert Equal (Comptroller BaiSpeed vZRX) 1e18
    Assert Equal (Comptroller BaiSpeed vDAI) 0
    --
    FastForward 100 Blocks
    Comptroller ClaimBai Geoff
    Assert Equal (Bep20 XBID TokenBalance Geoff) 175e18-- += 1e18 * 100
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    --
    Comptroller AddBaiMarkets vDAI
    FastForward 100 Blocks
    Comptroller ClaimBai Geoff
    Assert Equal (Bep20 XBID TokenBalance Geoff) 250e18--half of vdai, all of zrx. += (.25 + .5) * 100
    Assert Equal (Comptroller BaiAccrued Geoff) 0

Test "TransferComp handles running out of XBID in Comptroller correctly"
    FlywheelComptroller price:1.0 borrowRate:0.000005 venusInitAmount:1e18
    InitSpeeds
    FastForward 2 Blocks
    Comptroller ClaimBai Geoff
    Assert Equal (Comptroller BaiAccrued Geoff) 2e18
    Assert Equal (Bep20 XBID TokenBalance Geoff) 0
    Give (Address Comptroller) 1e18 XBID
    Comptroller ClaimBai Geoff
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Assert Equal (Bep20 XBID TokenBalance Geoff) 2e18

Test "Changing XBID rate continues to distribute at the correct speed"
    FlywheelComptroller
    InitSpeeds
    --
    Assert Equal (Comptroller BaiSpeed vZRX) 1e18
    FastForward 10 Blocks
    Comptroller SetBaiRate 2e18
    Assert Equal (Comptroller BaiSpeed vZRX) 2e18
    FastForward 10 Blocks
    Comptroller ClaimBai Geoff
    Assert Equal (Comptroller BaiAccrued Geoff) 0
    Assert Equal (Bep20 XBID TokenBalance Geoff) 30e18
